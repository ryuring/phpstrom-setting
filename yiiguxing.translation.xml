<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="2494" />
    <option name="newTranslationDialogY" value="485" />
    <histories>
      <item value="If you need to set complex expressions as order conditions" />
      <item value="The alias for a single rule or multiple rules array" />
      <item value="Add a validation rule to ensure that a field contains a scalar." />
      <item value="Returns camelBacked version of an underscored string." />
      <item value="Set logs to different files so they don't have permission conflicts." />
      <item value="Gets a representation of the elements in the tree as a flat list where the keys are the primary key for the table and the values are the display field for the table. Values are prefixed to visually indicate relative depth in the tree." />
      <item value="Build the fixtures table schema from the fields property." />
      <item value="Test Fixture" />
      <item value="Constraints Interface" />
      <item value="Table Schema Aware Interface" />
      <item value="Dialect" />
      <item value="If secureAttributes is set, these HTML attributes will be merged into the hidden input tags generated for the Security Component. This is especially useful to set HTML5 attributes like 'form'." />
      <item value="Generates a hidden field with a security hash based on the fields used in the form." />
      <item value="identical" />
      <item value="verify" />
      <item value="get the maximum index value in the table." />
      <item value="Optionally, the stripped characters can also be specified using the charlist parameter." />
      <item value="Optionally, the stripped characters can also be specified using" />
      <item value="Fixture Strategy Interface" />
      <item value="Define fallback values for required constants and configuration. To customize constants and configuration remove this require and define the data required by your plugin here." />
      <item value="and define the data required by your plugin here." />
      <item value="To customize constants and configuration remove this require" />
      <item value="Define fallback values for required constants and configuration." />
      <item value="Constraints" />
      <item value="legacy fixtures are managed by FixtureInjector" />
      <item value="4.3.0 Disabling auto-fixtures is deprecated and only available using FixtureInjector fixture system." />
      <item value="Disabling auto-fixtures is deprecated and only available using FixtureInjector fixture system" />
      <item value="incorrect" />
      <item value="This method will by default persist entities belonging to associated tables, whenever a dirty property matching the name of the property name set for an association in this table. It is possible to control what associations will be saved and to pass additional option for saving them." />
      <item value="When merging HasMany or BelongsToMany associations, all the entities in the `data` array will appear, those that can be matched by primary key will get the data merged, but those that cannot, will be discarded." />
      <item value="You can limit fields that will be present in the merged entity by passing the `fields` option, which is also accepted for associations:" />
      <item value="The data to prepare" />
      <item value="prepare" />
      <item value="_prepare Data And Options" />
      <item value="A list of options for the object hydration" />
      <item value="テスト" />
      <item value="テスト0" />
      <item value="test" />
      <item value="te" />
      <item value="- `validate`: Set to false to disable validation, true to validate each record before saving, 'first' to validate all records before any are saved (default), or 'only' to only validate the records, but not save them. - `atomic`: If true (default), will attempt to save all records in a single transaction. Should be set to false if databasetable does not support transactions. - `fieldList`: Equivalent to the fieldList parameter in Model::save(). It should be an associate array with model name as key and array of fields as value. Eg." />
      <item value="Useful when converting request data into entities" />
      <item value="Contains logic to convert array data into entities" />
      <item value="emit" />
      <item value="register" />
      <item value="evaluate" />
      <item value="and parsinggenerating URLs with the routes it contains." />
      <item value="Provides an interface for addingremoving routes" />
      <item value="yield" />
      <item value="Set the names of parameters that will persisted automatically" />
      <item value="Promote a route (by default, the last one added) to the beginning of the list" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="63" />
        <entry key="JAPANESE" value="62" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1664865232003" />
  </component>
</application>